# .github/workflows/docker-publish.yml

name: Docker Build and Publish HLS Streamer

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  # and only if changes occur within the 'docker/' directory
  push:
    branches: [ "main" ]
    paths:
      - 'docker/**' # Only run if files in the docker directory change

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Define environment variables accessible by all jobs
env:
  REGISTRY: ghcr.io
  # IMAGE_NAME: ${{ github.repository }} # Format: owner/repository-name
  # Let's make it lowercase for consistency as Docker Hub/ghcr prefer it
  IMAGE_NAME: ${{ lower(github.repository) }}


jobs:
  build-and-push:
    name: Build and Push to GHCR
    runs-on: ubuntu-latest # Use the latest available Ubuntu runner

    # Grant permissions for the GITHUB_TOKEN to allow pushing to GHCR
    permissions:
      contents: read      # Needed to check out the repository
      packages: write     # Needed to push Docker image to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checks out your repository code

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Typically your GitHub username
          # GITHUB_TOKEN is a special secret automatically available to Actions
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta # Assign an ID to refer to the outputs of this step later
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # Generates tags like:
          # - latest (on default branch push)
          # - git commit SHA (short format)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker # IMPORTANT: Point to the directory containing your Dockerfile
          push: true # Push the image after building
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }} # Add labels generated by the metadata action